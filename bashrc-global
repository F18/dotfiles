#
# BASHRC-GLOBAL
#-- this file is sourced from .bashrc
#-- contains all global aliases used across your multiple platforms
#-- requires definition of $MYHOME and $MYWORK directories in the platform specific .bashrc
#

#
# Select Color Scheme and store as env variable for
# bash, vim, dircolors, and tmux config
#
#MYCOLORS='zenburn'
#MYCOLORS='jellybeans'
#MYCOLORS='wombat'
MYCOLORS='solarized-light'
#MYCOLORS='solarized-dark'
#-- export:
export MYCOLORS

#
# Define some colors
#-- my own colors
ROYALBLUE='\[\033[38;5;24m\]'
ZENGREEN='\[\033[38;5;108m\]'
MYGREY='\[\033[38;5;240m\]'
MYGREY2='\[\033[38;5;242m\]'
MYGREY3='\[\033[38;5;252m\]'
MYGREY4='\[\033[38;5;246m\]'
MYORANGE='\[\033[38;5;173m\]'
WHITE_1='\[\033[0;1m\]'
BLACK='\[\033[0;30m\]'
GREY='\[\033[1;30m\]'
RED='\[\033[0;31m\]'
LIGHT_RED='\[\033[1;31m\]'
GREEN='\[\033[0;32m\]'
LIGHT_GREEN='\[\033[1;32m\]'
BROWN='\[\033[0;33m\]'
YELLOW='\[\033[1;33m\]'
BLUE='\[\033[0;34m\]'
LIGHT_BLUE='\[\033[1;34m\]'
PURPLE='\[\033[0;35m\]'
LIGHT_PURPLE='\[\033[1;35m\]'
CYAN='\[\033[0;36m\]'
LIGHT_CYAN='\[\033[0;1;36m\]'
LIGHT_GREY='\[\033[0;37m\]'
WHITE='\[\033[1;37m\]'
SYMBOL="\\$"
WD="\W"

#
# PROMPT DISPLAY TEXT AND COLORS
#
#-- zenburn
if [ "$MYCOLORS" == "zenburn" ]; then
  NONE='\[\e[01;32m\]'
  BRACE_COLOR=$LIGHT_GREY
  LBRACE=$BRACE_COLOR[$BRACE_COLOR
  RBRACE=$BRACE_COLOR]$BRACE_COLOR
  PS1="$RED\w\n$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $YELLOW\W$RBRACE$NONE$ "
#-- wombat/jellybeans
elif [ "$MYCOLORS" == "jellybeans" ]; then
  #NONE=$WHITE
  NONE=$LIGHT_CYAN
  BRACE_COLOR=$ZENGREEN
  LBRACE=$BRACE_COLOR[$BRACE_COLOR
  RBRACE=$BRACE_COLOR]$BRACE_COLOR
  PS1="$MYGREY\w\n$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $LIGHT_PURPLE\W$RBRACE$NONE$ "
  PS2="$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $LIGHT_PURPLE\w$RBRACE$NONE$ "
#-- wombat/jellybeans
elif [ "$MYCOLORS" == "wombat" ]; then
  NONE=$MYGREY3
  BRACE_COLOR=$ZENGREEN
  LBRACE=$BRACE_COLOR[$BRACE_COLOR
  RBRACE=$BRACE_COLOR]$BRACE_COLOR
  PS1="$MYORANGE\w\n$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $LIGHT_PURPLE\W$RBRACE$NONE$ "
  PS2="$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $LIGHT_PURPLE\w$RBRACE$NONE$ "
#-- solarized-light
elif [ "$MYCOLORS" == "solarized-light" ]; then
  NONE='\[\e[01;248m\]'
  NONE=$MYGREY
  BRACE_COLOR=$LIGHT_CYAN
  LBRACE=$BRACE_COLOR[$BRACE_COLOR
  RBRACE=$BRACE_COLOR]$BRACE_COLOR
  PS1="$LIGHT_CYAN\w\n$LBRACE$MYGREY\D{%H:%M}$RBRACE$LBRACE$MYGREY\h $GREEN\W$RBRACE$NONE$ "
  PS2="$GREEN$LBRACE$MYGREY\D{%H:%M}$RBRACE$LBRACE$MYGREY\h $CYAN\w$RBRACE$NONE$ "
#-- solarized-dark
elif [ "$MYCOLORS" == "solarized-dark" ]; then
  NONE=$LIGHT_CYAN
  BRACE_COLOR=$MYGREY4
  LBRACE="$BRACE_COLOR[$BRACE_COLOR"
  RBRACE="$BRACE_COLOR]$BRACE_COLOR"
  PS1="$MYGREY2\w\n$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $CYAN\W$RBRACE$NONE$ "
  PS2="$GREEN$LBRACE$MYGREY4\D{%H:%M}$RBRACE$LBRACE$MYGREY4\h $CYAN\w$RBRACE$NONE$ "
#-- DEFAULT: wombat/jellybeans
else
  NONE=$WHITE
  BRACE_COLOR=$ZENGREEN
  LBRACE=$BRACE_COLOR[$BRACE_COLOR
  RBRACE=$BRACE_COLOR]$BRACE_COLOR
  PS1="$MYGREY\w\n$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $LIGHT_PURPLE\W$RBRACE$NONE$ "
  PS2="$LBRACE\D{%H:%M}$RBRACE$LBRACE\h $LIGHT_PURPLE\w$RBRACE$NONE$ "
fi 
export PS1
export PS0=$PS1
export PS2

#
# DIRECTORY and LS COLORS 
#
if [ "$TERM" != "dumb" ]; then
  if [ "$MYCOLORS" == "solarized-light" ]; then
    #-- solarized-light
    [ -e "$HOME/dotfiles/LS_COLORS-solarized-light" ] && DIR_COLORS="$HOME/dotfiles/LS_COLORS-solarized-light"
  elif [ "$MYCOLORS" == "solarized-dark" ]; then
    #-- solarized-dark
    [ -e "$HOME/dotfiles/LS_COLORS-solarized-dark" ] && DIR_COLORS="$HOME/dotfiles/LS_COLORS-solarized-dark"
  else
    #-- default
    [ -e "$HOME/dotfiles/LS_COLORS" ] && DIR_COLORS="$HOME/dotfiles/LS_COLORS"
  fi
  #-- set and evaluate
  [ -e "$DIR_COLORS" ] || DIR_COLORS=""
  eval "`dircolors -b $DIR_COLORS`"
  alias ls='ls --color=auto'
  alias dir='ls --color=auto --format=vertical'
  alias vdir='ls --color=auto --format=long'
fi

#
# User specific aliases and functions
#
alias ...='cd ..'                                # Go up one directory
alias ..='cd ..; l'                              # Go up one directory clear and list files
alias .='pwd'                                    # list the current directory path

alias avq='avidemux2_qt4'                        # launches video editor

alias bye='exit'                                 # Close connection

alias cdc='cd $MYHOME/02_courses'
alias cdd='cd $MYHOME/01_thesis/DECs/dec5'
alias cdg='cd $MYHOME/optima-grids'
alias cdj='cd $MYHOME/01_thesis/logbook/journal'
alias cdl='cd $MYHOME/01_thesis/literature'
alias cdo='cd $MYHOME/optima'
alias cdoo='cd $MYHOME/optima/optima2D'
alias cdp='cd $MYHOME/01_thesis/mypapers/conferences/201506_aiaa_dallas'
alias cdr='cd $MYHOME/01_thesis/mypapers/reviews/ctar2015'
alias cds='cd $MYWORK'
alias cdt='cd $MYHOME/01_thesis/phd'
alias cdvoo='cd $MYWORK/y2014/m11/d06-optCasesMidCruise'
alias cdvo='cd $MYWORK/y2015/m01'
alias cdwd='cd /windows/Users/ramy/Documents'
alias cdwdm='cd /windows/Users/ramy/Music'

alias checkSpellTex='aspell --lang=en --mode=tex check '
alias checkSpellTexAll='find . -name "*.tex" -exec aspell --lang=en --mode=tex check "{}" \;'
alias cj='checkjob'
alias cll='clear'                                # Clear the screen
alias cl='clear; ls'                             # Clear and list
alias cp='cp -i'                                 # Copy, but ask me first
alias cpForce='cp'                               # Copy, but ask me first
alias cpo='/bin/cp -f $MYHOME/optima/optima2D/OPTIMA2D_x86_64 . | echo "Copied OPTIMA2D_x86_64 to current directory"'
alias chmodf='find . -type f -print | xargs chmod' # chmod files only (recursively)
alias crop='mogrify -trim'                       # crop the given filename using imagemagik
                                                 # (allows you to crop multiple files at one)

alias df='df -h'
alias dirr='ls -al | more'  
alias dus='sudo du -sm * | sort -n'
alias duf='du -sm * | sort -n'                   # list folders in order of increasing size
alias digitizeit='cd $HOME/digitizeit; java -cp libs/JimiProClasses.zip:libs/jh.jar:libs/kunststoff.jar:libs/foxtrot.jar:DigitizeIt.jar de.ibo.digitizer.DigitizeIt' # Start the digitizeit software
alias dvhis='m *dvhis'

alias e='emacs'                                  # Open the text editor emacs
alias ed='ee'                                    # Open the text editor emacs with emacsclient daemon
                                                 # Note: ee is a bash script with the following command:
                                                 # estart='exec emacsclient --alternate-editor="" -c "$@" -n'
alias eall='e *.cc *.h'                          # Open all C++ related files in current directory
alias eb='cd; e .bashrc &'                       # Open the .bashrc file for editing
alias emptytrash='sudo rm -rf $HOME/.local/share/Trash/files/*'
alias ett='emacs -nw -q'                         # Open emacs in terminal mode (-nw) without loading the init-file (-q)
alias et='emacs -nw'                             # Open emacs in terminal mode (-nw)
alias ec='emacsclient -nw'                       # Open emacs in terminal mode (-nw)
alias ev='evince'                                # Open evince pdf viewer
alias epstopdfdir='ls *eps | xargs -n1 epstopdf' # run epstopdf on all eps files in directory
alias ep='epstopdf'

alias fn='find . -name'

alias g='gvim'                                   # open gvim
#-- apt-key: use as 'getkey 8BAF9A6F'
alias getkey='sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys'
alias getclass='xprop | grep WM_CLASS'
alias getresolution='xrandr --display :0 | grep " connected"'
alias gn='gnuplot'                               # run gnuplot 
alias gnpa='gnp 1 1000 0'                        # run gnuplot 
alias gnp2a='gnp2 1 1000 0'                        # run gnuplot 
alias gnp30='gnp3 00-00'                        # run gnuplot 
alias gnp40='gnp4 00-00'                        # run gnuplot 
alias grep="grep --color=auto"                   # grep: make it highlight the search string
alias gv='gvim'                                  # open gvim
alias gvhis='m *gvhis'
alias glhis='m *glhis'
#-- git
alias gb='git branch -a'                         # display all git branches
alias gdt='git difftool'                         # opens the git difftool (set as vimdiff)
alias gk='gitk --all'                            # open git repository GUI
alias gl='git log'                               # display git log
alias gt='git status'                            # display git status
alias gu='git remote update'                     # update remote repositories

alias h1='head -n1 -q'                        # Display first line without filename
alias hn='head -n'                        # Display first line without filename
alias head='head -100'                        # Display the first 100 lines of a file
alias hist='history'                          # Display history
alias h='htop'

alias icemlicManager='cd /usr2/local_net2/icemcfd/shared_files/licensing/lic_admin; ./anslic_admin'
alias imindmapV2='cd $HOME/ProgramFiles/iMindMap2.2.3; ./iMindMap'
alias iphoneReConnect='idevicepair unpair && idevicepair pair'

#alias jabref='~/usr/local/java/jre1.7.0/bin/java -jar ~/usr/local/jabref/JabRef-2.10b.jar'

#-- running jobs
alias ejobs='v $MYHOME/bin/scripts/script-lm.sh'
alias jobs='$MYHOME/bin/scripts/script-lm.sh'

alias k1='kill -15'
alias k9='kill -9'

alias l='ls -lsh'                             # List all files in short format
alias la='ls -a'                              # List all including hidden 
alias lc='ls *.f*'                            # List fortran code only
alias ld='ls -lrSh'                           # List all files in order of file size
alias lf='ls -l | grep ^-'                    # List files only (not directories)
alias lh='l history'                          # List local history directory
alias ll='ls -laSh'                           # List all files in long format
alias lm='ls -lrth'                           # List all files in order of date modified
alias lt='ll --sort=extension'                # List files only (not directories)
alias ln='ln -s'                              # Create soft link
#-- Prints on laser color printer, single-sided
alias lpcs='/usr/bin/lpr -P lpc -o InputSlot=Tray3 -o PageSize=Letter -o Duplex=None'
#-- Prints on laser color printer, double-sided
alias lpcd='/usr/bin/lpr -P lpc -o InputSlot=Tray3 -o PageSize=Letter -o Duplex=DuplexNoTumble'  
#-- Prints in black&white, single-sided
alias lpbs='/usr/bin/lpr -P lp -o InputSlot=Tray_2 -o OutputBin=PrinterDefault -o Resolution=600x1200dpi -o PageSize=Letter -o Duplex=None' 
#-- Prints in black&white, double-sided
alias lpbd='/usr/bin/lpr -P lp -o InputSlot=Tray_2 -o OutputBin=PrinterDefault -o Resolution=600x1200dpi -o PageSize=Letter -o Duplex=DuplexNoTumble' 
#-- Prints on laser color printer, single-sided, landlscape
alias lpcsl='/usr/bin/lpr -P lpc -o InputSlot=Tray3 -o PageSize=Letter -o Duplex=None -o landscape'  
#-- Prints on laser color printer, double-sided, landlscape
alias lpcdl='/usr/bin/lpr -P lpc -o InputSlot=Tray3 -o PageSize=Letter -o Duplex=DuplexNoTumble -o landscape'  
#-- Prints in black&white, single-sided, landlscape
alias lpbsl='/usr/bin/lpr -P lp -o InputSlot=Tray_2 -o OutputBin=PrinterDefault -o Resolution=600x1200dpi -o PageSize=Letter -o Duplex=None -o landscape'
#-- Prints in black&white, double-sided, landlscape
alias lpbdl='/usr/bin/lpr -P lp -o InputSlot=Tray_2 -o OutputBin=PrinterDefault -o Resolution=600x1200dpi -o PageSize=Letter -o Duplex=DuplexNoTumble -o landscape' 

alias m='more'
alias m0='more rest00-00'
#alias mplayer='mplayer -idle -fixed-vo' # keep mplayer open after video is complete
alias mousefix='gpointing-device-settings'
alias mv='mv -i'                              # Move, but ask me first
alias mymerge='git-mergetool --tool xxdiff'
alias myzip='tar -cvzf'                       # use as "myzip filearchive.tar.gz  foldername/"
alias myunzip='tar -xvpzf'                    # extract archive, w/ verbose, permissions, gunzip, and filename

alias nautilus='nautilus --no-desktop --browser'

alias oo='openoffice.org'                     # Open the openoffice software
alias office='openoffice.org'

alias p='py-compareFD.py'
alias pdf='pdfstudio'                        # For a launcher you can use PDFStudio as the command
alias pg='ping www.google.ca'                 # ping the google website
alias pp='nice -19 postprocess_unsteady_data' # runs preplot on cffc data
alias ppclean='rm -f *.gplt *residual.dat *.tree *.soln'
alias ps2pdf='ps2pdf -sPAPERSIZE=a4'          # Force the papersize to be the standard a4 letter
alias ps12='export PS1=$PS2' # changes termianl prompt from PS1 to PS2 for your compact compiling view
alias ps21='export PS1=$PS0' # changes termianl prompt from PS1 to PS2 for your compact compiling view
alias po='ps aux | grep OPTIMA2D'          # Force the papersize to be the standard a4 letter
alias py='python'
alias py00='py-compareFD.py rest00 fd5 0'
alias py01='py-compareFD.py rest00 fd5 1'
alias py10='py-compareFD.py rest01 fd5 0'
alias py11='py-compareFD.py rest01 fd5 1'
alias pmem='pidstat -r -p'                    # Outputs the memory statistics for a particular job id
                                              # Enter the following: "pmem 6218 2 5 > memlog.txt" for 
                                              # 5 outputs every 2 seconds written to file memlog.txt


alias red='gtk-redshift -l 43.67:-79.42 -t 6400:5800 -g 0.8'
alias re='rubber-info'
alias rm='rm -i'                              # Remove, but ask me first
alias rme='rm *~ -i'                          # Remove emacs backup files, but ask me first
alias rmef='rm *~ -f'                         # Remove emacs backup files, but ask me first
alias rmout='rm output.201* -rf'
alias rmrest='rm rest* screen -f'
alias rename0100='rename "s/01/00/g" rest01*' # rename all rest01 files to rest00 in a directory

alias sbash='source $HOME/.bashrc-global; source $HOME/.bashrc'
alias sb='sbash'
alias scr='cd $MYWORK" "'
alias sn='tail -100f SNOPT.sum00'
alias snd='tail -n5 */SNOPT.sum00'
#-- gnu screen
alias sc='screen -t " "'                      # attaches to a given screen session (use session PID)
alias sr='screen -r'                          # attaches to a given screen session (use session PID)
alias sls='screen -ls'                        # lists the GNU screen sessions
alias saveX='sudo Xorg -configure' # creates a clean xorg.conf.new in your home directory
alias startX='sudo service mdm start' # stops graphical interface (mint 13)
alias stopX='sudo service mdm stop' # starts graphical interface (mint 13)

#-- tail
alias t='tf'
alias t1='tail --lines=1'
alias t1q='tail -q -n 1'
alias t2q='tail -q -n 2'
alias t5='tail --lines=5'
alias t10='tail --lines=10 '
alias t20='tail --lines=20 '
alias tf='tail --lines=300 -F'
alias tg0='tail -50f rest00-00.gnu'
alias tg01='tail -50f rest01-00.gnu'
alias tg1='tail -50f rest00-01.gnu'
alias tg2='tail -50f rest00-02.gnu'
alias tg3='tail -50f rest00-03.gnu'
alias tg4='tail -50f rest00-04.gnu'
alias tg5='tail -50f rest00-05.gnu'
alias tg6='tail -50f rest00-06.gnu'
alias tg7='tail -50f rest00-07.gnu'
alias tg='tf *.gmgrad'
alias th='tail -50f *.his'
alias tn='tail -n'
alias to='tf *00.opt'
alias to1='tf *01-00.opt'
#alias tp='tf *00.tp'
alias tpout='tf *00.tpout'
alias tpsum='tf *00.tpsum'
alias tpld='tf *00.tpld'
alias tr='tf *00.tp'
alias ts='tf screen'
#-- displays top ten biggest folders/files in current directory
alias topten='du -sm $(/bin/ls -A) | sort -rn | head -10'
#-- tecplot
alias tecplot='tec360'
alias tecmac='tecplot ~/scripts/zonemacro.mcr'
alias tecmac_c='tecplot ~/scripts/zonemacro_cells.mcr'
alias tecmac_n='tecplot ~/scripts/zonemacro_nodes.mcr'
alias tp='tecplot'
#-- tmux
#alias tmux="TERM=screen-256color-bce tmux"
alias tma='tmux attach -t' 
alias tmd='tmux detach'
alias tmk='tmux kill-session -t'
alias tml='tmux list-sessions'
#-- tree
alias tree='tree -C -I "*.git"'               # list all files and directories as a tree
alias treed='tree -C -d -I "*.git"'           # list all directories

alias vg='valgrind --tool=memcheck --leak-check=yes' # Execute program with valgrind debuger
alias video='xanim' # program for viewing avi files
#-- vim
alias v='$MYVIM'
alias vi='v'
alias vb='v $HOME/.bashrc'
alias vbg='v *.dbg'
alias vd='v -d'
alias vg='v $HOME/.bashrc-global'
alias vj='cd $MYHOME/01_thesis/logbook/journal; v researchJournal.txt'
alias vo='v opt.inp'
alias vp='v $HOME/bin/scripts/packages.list'
alias vs='v screen'
alias vv='v $HOME/dotfiles/vim-local/vimrc'
alias vu='v -u NONE'

#
# Source other definitions
#
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi
#
# Export editor
#
export EDITOR="vi"

#
# Custom functions definitions
#

#
# Grep/Search related
#
#-- Find a file with a pattern in name:
function ff() { find . -type f -iname '*'$@'*' ; }
function fe() { find . -type f -iname '*'$@'' | xargs vim; }
function fl() { find . -type f -iname '*'$@'' | xargs ls -lash; }
#-- Find a file with a pattern in name:
function fft1() { find '*'$@'*' -type f; sed -n '$p'; }
#-- Recursively searches all the files for the given string
function rgrep() { grep -irn --include="*" -- "$@" . ; }
#-- C++ .cc grep, only searches C++ source (.cc) files
function grepc() { grep -in --include="*.cc" -- "$@" * ; }
function rgrepc() { grep -irn --include="*.cc" -- "$@" . ; }
#-- C++ .h grep, only searches C++ header (.h) files
function greph() { grep -in --include="*.h" -- "$@" * ; }
function rgreph() { grep -irn --include="*.h" -- "$@" . ; }
#-- Fortran grep, only searches Fortran source 
function grepf() { grep -in --include=*.{f,F,f90,F90,inc} -- "$@" * ; }
function rgrepf() { grep -irn --include=*.{f,F,f90,F90,inc} -- "$@" . ; }
function gf() { grep -irn --include=*.{f,F,f90,F90,inc} --exclude-dir=unused -- "$@" . ; }
function gfc() { grep -irn --include=*.{f,F,f90,F90,inc} --exclude-dir=unused -- "call $@" . ; }
function gfs() { grep -irn --include=*.{f,F,f90,F90,inc} --exclude-dir=unused -- "subroutine $@" . ; }
function gfe() { grep -irn --include=*.{f,F,f90,F90,inc} --exclude-dir=unused -- "$@[\t ]*=[^=]" . ; }
#-- Python grep, only searches Python source
function grepy() { grep -in --include="*.py" -- "$@" * ; }
function rgrepy() { grep -irn --include="*.py" -- "$@" . ; }
#-- specify file type and expression
function gg() { 
args=("$@") ;
echo "Grep file type ${args[$((0))]} for ${args[$((1))]}";
grep -irn --include="*.${args[$((0))]}" -- "${args[$((1))]}" . ; 
}
#-- specify file type and expression
function gg2() { 
args=("$@") ;
echo "Grep file type ${args[$((0))]} for ${args[$((1))]} or ${args[$((2))]}";
grep -irn --include="*.${args[$((0))]}" -- "${args[$((1))]}\|${args[$((2))]}" . ; 
}
#
# Media related
#
#-- convert ogv file to avi (input is the filename without the extension)
function ogv2avi() { mencoder -idx "$@".ogv -ovc lavc -oac mp3lame -o "$@".avi ; }
#-- convert avi file to mpg (input is the filename without the extension)
function avi2mpg() { ffmpeg -i "$@".avi "$@".mpg ; }
#-- convert ogv file to mpg (input is the filename without the extension)
function ogv2mpg() { mencoder -idx "$@".ogv -ovc lavc -oac mp3lame -o "$@".avi ; ffmpeg -i "$@".avi "$@".mpg ; }
#-- tail the rest00-##.gnu file
function tg() { tail -50f rest00-$@.gnu; }
#
# bash cd and list
#
function c() { cd "$@" ; l ;}
function cs() { cd *"$@"* ; l ;}
function csss(){
    # only change directory if a directory is specified
    [ -n "${1}" ] && cd $1
    lls
}
#
# Advanced ls function
# Counts files, subdirectories and directory size and displays details
# about files depending on the available space
#
function lls () {
	#-- count files
	echo -n "<`find . -maxdepth 1 -mindepth 1 -type f | wc -l | tr -d '[:space:]'` files>"
	#-- count sub-directories
	echo -n " <`find . -maxdepth 1 -mindepth 1 -type d | wc -l | tr -d '[:space:]'` dirs/>"
	#-- count links
	echo -n " <`find . -maxdepth 1 -mindepth 1 -type l | wc -l | tr -d '[:space:]'` links@>"
	#-- total disk space used by this directory and all subdirectories
	echo " <~`du -sh . 2> /dev/null | cut -f1`>"
	ROWS=`stty size | cut -d' ' -f1`
	FILES=`find . -maxdepth 1 -mindepth 1 |
	wc -l | tr -d '[:space:]'`
	#-- if the terminal has enough lines, do a long listing
	if [ `expr "${ROWS}" - 6` -lt "${FILES}" ]; then
		ls
	else
		ls -hlAF --full-time
	fi
}
# remove pre-amble before (--) in purge file list
# use as purgeListFiles oldFile.txt > newFile.txt
#function purgeFilesList () { sed 's/.*--//g' "$@" | sort;}

# reverse lines of a file
function reverseFileLines () { sed '1!G;h;$!d' "$@";}
 
#
# GIT related
#
function gd() { git diff > $HOME/tmp/gd.txt; v $HOME/tmp/gd.txt; }
#
# OPTIMA2D related
#
function go() { $MYHOME/optima/optima2D/OPTIMA2D_x86_64 > screen;}
function 0-go() 
{ 
  rm rest01* -f
  fp_TtoF
  $MYHOME/optima/optima2D/OPTIMA2D_x86_64 > screen;
}
#
function 02-cleanup() { 2-cleanup-snopt; }
#
function subdir-clean-rmout() 
{
  for dir in */; do
    echo $dir;
    cd $dir;
    2-cleanup-snopt; 
    rmout; 
    cd ../
  done
}
#
function subdir-clean() 
{
  for dir in */; do
    echo $dir;
    cd $dir;
    2-cleanup-snopt; 
    cd ../
  done
}
#
function subdir-cp-grid 
{ 
  for dir in */; do
    echo $dir;
    /bin/cp -f grid-new* $dir/.
  done
}
#
function subdir-cp-exe
{ 
  for dir in */; do
    echo $dir;
    /bin/cp -f $MYHOME/optima/optima2D/OPTIMA2D_x86_64 $dir/.
  done
}
#
function subdir-cp-opt 
{ 
  for dir in */; do
    echo $dir;
    /bin/cp -f opt.inp $dir/.
  done
}
#
function ge
{ 
  google docs edit --title "$@" --editor vim;
}
#
function rp
{
  rubber --pdf "$@"tex;
  /bin/cp -f "$@"log screen;
  grep -in "warning\|error" screen;
  rubber --clean "$@"tex;
}
function rpf
{
  rubber --pdf -f "$@"tex;
  /bin/cp -f "$@"log screen;
  grep -in "warning\|error" screen;
  rubber --clean "$@"tex;
}

function rpc
{
  rubber --clean "$@"tex;
  rm -f screen;
}

function rpca
{
  rubber --clean --pdf "$@"tex;
  rm -f screen;
}

#
# END OF BASHRC-GLOBAL
